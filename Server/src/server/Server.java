


/*

***********************************************************
***********************************************************
******************** DJERRAH ABDELKRIM ********************
***********************************************************
***********************************************************

*/
package server;


import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import static server.Server.*;
import java.io.*;
import java.net.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.time.format.DateTimeFormatter;  
import java.time.LocalDateTime;    
import java.util.ArrayList;   
import java.util.List;


/**
 *
 * @author mrkim
 */


//TraiterReq 


class TraiterReq  extends Server implements Runnable{
    Socket client;
    static int id = 0;
    
    TraiterReq(Socket client){
        this.client = client;
    }
    @Override
    public void run() {
         try {
                DateTimeFormatter dtf = DateTimeFormatter.ofPattern("HH:mm:ss");  
                LocalDateTime now = LocalDateTime.now();
                id++;
                int new_id = id;
                
                System.out.println("Client numéro: "+ new_id +" a été connecté sur la port "+client.getPort()+" á: "+dtf.format(now));
                String time = dtf.format(now);
                addSocket(client);
                DataInputStream Sin= new DataInputStream(client.getInputStream());
                DataOutputStream Sout= new DataOutputStream(client.getOutputStream());
               
                
                int Current = 1; // Current Q
                int Result = 0;
                String answer;
                
                String Qstns[] = {"Q1: Une @ IPV6 tient sur :\n" +"   A. 32 bits\n   B. 128 bits",
                    "Q2: Un numéro de port sert à :\n   A. Identifier une machine\n   B. Identifier une application",
                    "Q3: L’API Socket est au niveau :\n  A. Transport\n   B. Application",
                    "Q4:  TCP fonctionne en mode :\n   A. Connecté\n   B. Non connecté",
                    "Q5: UDP est :\n   A. Fiable\n   B. Non Fiable",
                    "Q6: 10.0.0.1 est une @ IPV4 :\n   A. Privée\n   B. Public",
                    "Q7: 197.0.0.1 est une @ IPV4 :\n  A. Classe D\n   B. Classe C",
                    "Q8: ServerSocket est la classe Java qui implémente :\n  A.  Les Sockets d’écoute\n   B. Les Sockets de transfert ",
                    "Q9: La classe Date est définie dans :\n   A. Java.io\n   B. Java.util",
                    "Q10: La classe InetAddress correspond à :\n  A. Adresse IP\n  B. Adresse URL"
                };
                   
                String Ansrs[]={"b","b","a","a","b","a","b","a","b","a"};
                int Q=0;
//                get client id
                
                while(client.isConnected() && Q<10){
//                    add with unique client id  
                    addClient(new_id,time,Result,10-Q);

                     Sout.writeUTF(Qstns[Q]+","+Result);
                    
                     answer = Sin.readUTF();
                     
                    if (answer.equalsIgnoreCase(Ansrs[Q])){
                        
                        Result++; 
                        
                        // Just because the previous call method won't be called in case the result is 10/10
                        if(Q==9){
                            addClient(new_id,time,Result,10-Q-1);             
                        }
                    }
                    
                    if(answer.equalsIgnoreCase("quite")){
                        client.close();
                        break;          
                    }
                    Q++; 
                }

                Sout.writeUTF("Score: "+Result+","+Result);
                Sin.readUTF();
                client.close();
            }catch (IOException ex) {   
            
        }   
    }   
}


public class Server extends javax.swing.JFrame implements ActionListener {

    static Boolean serverAlive = false;
    static ServerSocket server;
    static List<String> listOfClients = new ArrayList<String>();
    static List<Socket> listOfSockets = new ArrayList<Socket>();
    
    public Server() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        grid = new javax.swing.JTable();
        jLabel5 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 48)); // NOI18N
        jLabel1.setText("Server QUIZZ");

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel2.setText("Date");

        jTextField1.setEditable(false);
        jTextField1.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        jTextField1.setForeground(new java.awt.Color(0, 51, 255));
        jTextField1.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        jButton2.setText("Stop Server");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        grid.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID client", "Thread Name", "Time of connection", "Result", "Questions left"
            }
        ));
        jScrollPane2.setViewportView(grid);

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 0, 51));
        jLabel5.setText("DJERRAH ABDELKRIM / KHENIFER YOUNES ");

        jButton1.setText("Start Server");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(280, 280, 280)
                        .addComponent(jLabel2))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(168, 168, 168)
                        .addComponent(jLabel5))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(164, 164, 164)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 287, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(52, 52, 52)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 520, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 227, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(61, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(42, 42, 42)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29)
                .addComponent(jLabel5)
                .addContainerGap(36, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        //Call function to stop Server
        try {
            jButton1.setEnabled(true);
            jButton2.setEnabled(false);
            toggleServer(false);
        } catch (IOException ex) {
            
        }         
        
    }//GEN-LAST:event_jButton2ActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        
        //To display the current date when the window is opened
        DateTimeFormatter dtf = DateTimeFormatter.ofPattern("yyyy/MM/dd");  
        LocalDateTime now = LocalDateTime.now(); 
        jTextField1.setText(dtf.format(now));
        refreshUsers();
    }//GEN-LAST:event_formWindowOpened

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        //Call function to stop Server
        try {
            toggleServer(false);
            System.exit(0);
        } catch (IOException ex) {
            
        } 

    }//GEN-LAST:event_formWindowClosing

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
      //Call function to stop Server
        try {
            toggleServer(false);
            System.exit(0);
        } catch (IOException ex) {
            
        } 
           
    }//GEN-LAST:event_formWindowClosed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try {
            jButton1.setEnabled(false);
            jButton2.setEnabled(true);
            toggleServer(true);
        } catch (IOException ex) {
           
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) throws IOException {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Server().setVisible(true);
            }
        });
        
       
            
    }
    
    
    private void refreshUsers() {
        
          ActionListener actionListener = new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent actionEvent) {
                 // Check if there is a socket is closed, if YES then we remove it from listOfSockets and also remove it information from listOfClients using the same index
                 for(int j=0; j<listOfSockets.size(); j++){
                     if(listOfSockets.get(j).isClosed()){
                         listOfClients.remove(j);      
                         listOfSockets.remove(j);
                         
                     }
                 }
                
            
                 
                // updating every 500ms the table of the currently connected clients 
                 DefaultTableModel  model = (DefaultTableModel)grid.getModel(); 
                 model.setRowCount(0); // to Clear the table
                 int numOfClientsToShow = 0; // Because it's required that we need to perview only the last 4 connected clients
                for(int i=listOfClients.size()-1; i>=0; i--){ 
                    if(numOfClientsToShow<4){
                         String [] str = listOfClients.get(i).split(",");   
                         String ClientID = str[0];
                         String ClientName = "Thread-"+ClientID;
                         String Time = str[1];    
                         String Result = str[2]; 
                         String QLeft = str[3]; 
                         model.addRow(new String[]{ClientID,ClientName,Time,Result,QLeft}); 
                        }
                    numOfClientsToShow++;
               }
                
            }
        };
        Timer timer = new Timer(500, actionListener);
        timer.start();
    }
 
     
     public void addClient(Integer id, String date, int Result, int Question){
         //First, we need to check if the client ID is already exist in the list, if YES then we just modify its value. 
         //Else, we simply add a new element in the list contains the info of the new client
          boolean Found = false;
          int At=0;
                for(int i=0; i<listOfClients.size();i++){
                    String [] str = listOfClients.get(i).split(",");
                    Integer ClientID = Integer.parseInt(str[0]);               
                    if(ClientID == id ){
                         Found = true;
                         At = i;
                    }
                    
                }
                if(Found){ //modify                                 
                    listOfClients.set(At, id+","+date+","+Result+","+Question);
                }
                else { //add             
                    listOfClients.add(id+","+date+","+Result+","+Question); 
                }
                                                      
     }
     
     public void addSocket(Socket client){      
       listOfSockets.add(client); // adding the current client socket to a list so later we can check if it's still alive or not                                  
     }
     
     public void toggleServer(boolean check) throws IOException{
         //I've added the code of starting the server in a thread to prevend GUI from freezing
         new Thread(new Runnable() {
             @Override
             public void run() {
                  if(check){ // Start Server
                      try {
                          //Start Server
                          serverAlive = true;
                          server = new ServerSocket(6000);
                          System.out.println("server started");
                          while(serverAlive){
                              Socket s = server.accept();
                              Runnable job = new TraiterReq(s);
                              Thread t = new Thread(job);
                              t.start();
                          }
                      } catch (IOException ex) {
                          
                      }
                   }
                  else{ // Stop Server
                      try {
                            //Stop Server
                            if(serverAlive){
                                server.close();
                                serverAlive = false;
                                System.out.println("server closed");
                            }                       
                        } catch (IOException ex) {

                        }
                  }
             }
         }).start();
         
          
        
                  
        
     }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable grid;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables

    @Override
    public void actionPerformed(ActionEvent e) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
}
